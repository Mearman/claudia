name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Claudia v${{ steps.version.outputs.VERSION }}
          body: |
            # Claudia v${{ steps.version.outputs.VERSION }}
            
            ## What's New
            
            See the [changelog](CHANGELOG.md) for a complete list of changes.
            
            ## Downloads
            
            ### macOS
            - **Universal (Intel + Apple Silicon)**: Download `Claudia_${{ steps.version.outputs.VERSION }}_universal.dmg`
            
            ### Windows
            - **x64**: Download `Claudia_${{ steps.version.outputs.VERSION }}_x64.msi`
            
            ### Linux
            - **x64 (DEB)**: Download `claudia_${{ steps.version.outputs.VERSION }}_amd64.deb`
            - **x64 (AppImage)**: Download `claudia_${{ steps.version.outputs.VERSION }}_amd64.AppImage`
            
            ## Installation
            
            ### macOS
            1. Download the `.dmg` file
            2. Open it and drag Claudia to Applications
            3. If you get a security warning, go to System Preferences > Security & Privacy and click "Open Anyway"
            
            ### Windows
            1. Download the `.msi` installer
            2. Run the installer and follow the prompts
            3. Windows Defender may show a warning - click "More info" then "Run anyway"
            
            ### Linux
            **DEB Package:**
            ```bash
            sudo dpkg -i claudia_${{ steps.version.outputs.VERSION }}_amd64.deb
            sudo apt-get install -f  # Fix any dependency issues
            ```
            
            **AppImage:**
            ```bash
            chmod +x claudia_${{ steps.version.outputs.VERSION }}_amd64.AppImage
            ./claudia_${{ steps.version.outputs.VERSION }}_amd64.AppImage
            ```
            
            ## Requirements
            
            - **Claude Code CLI**: Install from [claude.ai/code](https://claude.ai/code)
            - **Rust**: Only required for building from source
            
            ## Support
            
            - üêõ **Issues**: [Report bugs](https://github.com/getAsterisk/claudia/issues)
            - üí¨ **Discussions**: [Community discussions](https://github.com/getAsterisk/claudia/discussions)
            - üìñ **Documentation**: [User guide](https://github.com/getAsterisk/claudia#readme)
          draft: false
          prerelease: false

  build-release:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-14'  # Apple Silicon runner
            args: '--target universal-apple-darwin'
            target: 'universal-apple-darwin'
            name: 'macOS Universal'
            artifact_pattern: |
              src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg
          - platform: 'ubuntu-22.04'
            args: ''
            target: ''
            name: 'Linux x64'
            artifact_pattern: |
              src-tauri/target/release/bundle/deb/*.deb
              src-tauri/target/release/bundle/appimage/*.AppImage
          - platform: 'windows-latest'
            args: ''
            target: ''
            name: 'Windows x64'
            artifact_pattern: |
              src-tauri/target/release/bundle/msi/*.msi
              src-tauri/target/release/bundle/nsis/*.exe

    runs-on: ${{ matrix.platform }}
    name: Build ${{ matrix.name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libxdo-dev \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install frontend dependencies
        run: bun install

      - name: Extract version from tag
        id: version
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}

      - name: Prepare release assets (macOS)
        if: matrix.platform == 'macos-14'
        run: |
          mkdir -p release-assets
          cp src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg release-assets/
          # Rename to include version
          cd release-assets
          for file in *.dmg; do
            mv "$file" "Claudia_${{ steps.version.outputs.VERSION }}_universal.dmg"
          done

      - name: Prepare release assets (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          mkdir -p release-assets
          cp src-tauri/target/release/bundle/deb/*.deb release-assets/
          cp src-tauri/target/release/bundle/appimage/*.AppImage release-assets/
          # Rename to include version
          cd release-assets
          for file in *.deb; do
            mv "$file" "claudia_${{ steps.version.outputs.VERSION }}_amd64.deb"
          done
          for file in *.AppImage; do
            mv "$file" "claudia_${{ steps.version.outputs.VERSION }}_amd64.AppImage"
          done

      - name: Prepare release assets (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          mkdir release-assets
          cp src-tauri/target/release/bundle/msi/*.msi release-assets/
          # Rename to include version
          cd release-assets
          Get-ChildItem -Name "*.msi" | ForEach-Object {
            $newName = "Claudia_${{ steps.version.outputs.VERSION }}_x64.msi"
            Rename-Item $_ $newName
          }

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: release-assets/*
          asset_name: ${{ matrix.name }}-assets
          asset_content_type: application/octet-stream

      - name: Upload individual assets (macOS)
        if: matrix.platform == 'macos-14'
        run: |
          for file in release-assets/*; do
            curl \
              -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ needs.create-release.outputs.upload_url }}=$(basename "$file")"
          done

      - name: Upload individual assets (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          for file in release-assets/*; do
            curl \
              -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ needs.create-release.outputs.upload_url }}=$(basename "$file")"
          done

      - name: Upload individual assets (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          Get-ChildItem release-assets/* | ForEach-Object {
            $fileName = $_.Name
            $uploadUrl = "${{ needs.create-release.outputs.upload_url }}=$fileName"
            Invoke-RestMethod -Uri $uploadUrl -Method Post -Headers @{
              "Authorization" = "token ${{ secrets.GITHUB_TOKEN }}"
              "Content-Type" = "application/octet-stream"
            } -InFile $_.FullName
          }

  notify-success:
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Notify success
        run: |
          echo "‚úÖ Release v${{ steps.version.outputs.VERSION }} built successfully!"
          echo "üì¶ Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.VERSION }}"

  notify-failure:
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Notify failure
        run: |
          echo "‚ùå Release build failed!"
          echo "Check the workflow logs for details."